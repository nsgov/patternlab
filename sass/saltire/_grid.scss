//
// Grid system
// --------------------------------------------------

// CSS Grid support
//
// Use classes paired with grid-container for specific usages (like Topics)

.grid-container {
  display: grid;

  &.topic {
    h2 {font-size: $font-size-large;}
    align-items: start;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    grid-gap: 0rem 2rem;

    h3 {font-size: $font-size-large;}
  }


  &.contact {
    align-items: start;
    // grid-template-columns: repeat(auto-fit, minmax(800px, 1fr));
    // grid-gap: 1rem;

    section {
      border-bottom: 1px solid $gray-lighter;
      padding-bottom: 1.5em;

      &:last-of-type {border-bottom: none;}
      &:target {
        		@include textblock($yellow, 20%);
      }

      article {
        max-width: 100%;

        h2, h3 {word-wrap: normal;}

        &:target {
          		@include textblock($yellow, 20%);
        }
      }
    }
  }
}



// Bootstrap Grid Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include make-row;
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}





//	---------------------------------------------
//	Containers
// 	---------------------------------------------


// Container: Default / Large
.container-lg {
	@include container;
  }

  // Container: Medium
  .container-md {
	@include container($screen-md);
  }

  // Container: Small
  .container-sm {
	@include container($screen-sm);
  }

  // Container: Small
  .container-xs {
	@include container($screen-xs);
  }

  // Container: Full Width
  .container-full {
	@include container($max-width: false);
  }


  // ---------------------------------------------
  // GRID: CLEARFIX
  // Add a clearfix class to the parent of floated children



  .clearfix {
	@include clearfix;
  }


  // ---------------------------------------------
  // GRID: ROWS
  //  - Used to wrap grid columns
  //  - Rows reset the 1st column's left and last column's right gutter
  //  - Must be wrapped in a container
  //  - All parameters have defaults
  //  - Parameters:
  //    - $grid-gutter {number}: Negative margins to offset horizontal padding



  // Row: Default
  .row {
	@include row;
  }

  // Row: Small
  .row-sm {
	@include row($grid-gutter: $grid-gutter-sm);
  }

  // Row: Large
  .row-lg {
	@include row($grid-gutter: $grid-gutter-lg);
  }


  // ---------------------------------------------
  // GRID: COLUMNS
  //  - Wrap in a row:
  //  - Columns create gutters
  //  - All parameters have defaults
  //  - Parameters:
  //    - $grid-gutter {number} : Gutter or horizontal padding


  // Column: Default
  .col {
	@include col;
  }

  // Column: Small
  .col-sm {
	@include col($grid-gutter: $grid-gutter-sm);
  }

  // Column: Large
  .col-lg {
	@include col($grid-gutter: $grid-gutter-lg);
  }


  // ---------------------------------------------
  // Column: Classes
  // Generates classes for 12 columns

  // Classes: Default
  // E.g., .col-1, .col-12
  @for $i from 1 through $grid-column-count {
	.col-#{$i} {
	  width: percentage($i / $grid-column-count);
	}
  }

  // Classes: Small Breakpoint
  // E.g., .col-1-sm, .col-12-sm
  @media (min-width: $screen-sm) {
	@for $i from 1 through $grid-column-count {
	  .col-#{$i}-sm {
		width: percentage($i / $grid-column-count);
	  }
	}
  }

  // Classes: Medium Breakpoint
  // E.g., .col-1-md, .col-12-md
  @media (min-width: $screen-md) {
	@for $i from 1 through $grid-column-count {
	  .col-#{$i}-md {
		width: percentage($i / $grid-column-count);
	  }
	}
  }

  // Classes: Large Breakpoint
  // E.g., .col-1-lg, .col-12-lg
  @media (min-width: $screen-lg) {
	@for $i from 1 through $grid-column-count {
	  .col-#{$i}-lg {
		width: percentage($i / $grid-column-count);
	  }
	}
  }


  // ---------------------------------------------
  // GRID: FLOATS

  .float-left {
	float: left;
  }

  .float-right {
	float: right;
  }


  // ---------------------------------------------
  // GRID: FLEXBOX

  .flex {
	display: flex;
  }

  .flex-wrap {
	flex-wrap: wrap;
  }

  .flex-justify-center {
	justify-content: center;
  }

  .flex-align-center {
	align-items: center;
  }

  .flex-1 {
	flex: 1;
  }

  .margin-left-auto {
	margin-left: auto;
  }

  .margin-right-auto {
	margin-right: auto;
  }
